{"version":3,"sources":["components/Header/Header.tsx","components/Color/Color.tsx","components/ColorList/ColorList.tsx","App.tsx","index.tsx"],"names":["Header","children","className","Color","color","name","id","onClick","e","navigator","clipboard","writeText","currentTarget","innerText","CopyLayer","HoverLayer","CopyButton","ColorDiv","styled","div","getColor","ColorWrapper","TextDiv","fadeIn","keyframes","textShadow","span","ColorList","colorIds","title","Wrapper","Title","ListDiv","map","getColorName","App","colorSet","Set","colorKeys","Object","keys","colorJson","forEach","add","split","useState","keyword","setKeyword","lists","category","list","filter","key","includes","toLowerCase","length","concat","type","onChange","value","target","ReactDOM","render","document","getElementById"],"mappings":"sPAUeA,EAJY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5B,OAAO,yBAAKC,UAAW,UAAWD,I,orECIpC,IAoCeE,EApCW,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GAClCC,EAAU,SAACC,GACfC,UAAUC,UAAUC,UAAUH,EAAEI,cAAcC,YAG1CC,EACJ,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAYT,QAASA,GAAUH,GAC/B,kBAACY,EAAD,CAAYT,QAASA,GAAUF,GAC/B,kBAACW,EAAD,CAAYT,QAASA,GAAUD,IAI7BW,EAAWC,IAAOC,IAAV,IAGQf,EACAgB,YAAS,0BAM/B,OACE,kBAACC,EAAD,KACGP,EACD,kBAACG,EAAD,MACA,kBAACK,EAAD,KACGjB,GAAQ,8BAAOA,GACfC,GAAM,8BAAOA,GACbF,GAAS,8BAAOA,MAQnBmB,EAASC,YAAH,KASNC,EAAaD,YAAH,KASVF,EAAUJ,IAAOC,IAAV,IAMHC,YAAS,0BAkBbL,EAAaG,IAAOC,IAAV,IAkBDI,GAGTP,EAAaE,IAAOQ,KAAV,IAeCD,GAMXJ,EAAeH,IAAOC,IAAV,IAaIC,YAAS,yBAOhBG,EAKTR,G,gbCnJN,IAgBeY,EAhBc,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAgC,IAAtBC,aAAsB,MAAd,QAAc,EAC9D,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KAAQF,GACR,kBAACG,EAAD,KACGJ,EAASK,KAAI,SAAA3B,GACZ,IAAMF,EAAQgB,YAASd,GACvB,OAAIF,EACK,kBAAC,EAAD,CAAOA,MAAOA,EAAOC,KAAM6B,YAAa5B,GAAKA,GAAIA,IACnD,2CASXwB,EAAUZ,IAAOC,IAAV,KAMPa,EAAUd,IAAOC,IAAV,KASPY,EAAQb,IAAOQ,KAAV,KCKIS,EA3CO,WACpB,IAAMC,EAAW,IAAIC,IACfC,EAAYC,OAAOC,KAAKC,GAC9BH,EAAUI,SAAQ,SAAAtC,GAChBgC,EAASO,IAAIvC,EAAMwC,MAAM,KAAK,OAJN,MAOIC,mBAAiB,IAPrB,mBAOnBC,EAPmB,KAOVC,EAPU,KAStBC,EAAqB,GACzBZ,EAASM,SAAQ,SAAAO,GACf,IAAMC,EAAOZ,EAAUa,QAAO,SAAAC,GAC5B,IAAM/C,EAAO6B,YAAakB,IAAQ,GAC5BhD,EAAQgB,YAASgC,IAAQ,GAC/B,OACEA,EAAIC,SAASJ,KACZG,EAAIE,cAAcD,SAASP,EAAQQ,gBAClCjD,EAAKiD,cAAcD,SAASP,EAAQQ,gBACpClD,EAAMkD,cAAcD,SAASP,EAAQQ,mBAIvCJ,EAAKK,OAAS,IAChBP,EAAQA,EAAMQ,OAAO,kBAAC,EAAD,CAAW5B,SAAUsB,EAAMrB,MAAOoB,SAS3D,OACE,oCACE,kBAAC,EAAD,KACE,8BAAO,kBACP,2BAAOQ,KAAM,OAAQC,SAVV,SAAC,GAE0B,IADhCC,EAC+B,EADzCC,OAAUD,MAEVZ,EAAWY,OAST,yBAAKzD,UAAW,YAAa8C,KCvCnCa,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d692d4ba.chunk.js","sourcesContent":["import React, { SFC, ReactNode } from \"react\";\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n}\r\n\r\nconst Header: SFC<Props> = ({ children }) => {\r\n  return <div className={\"header\"}>{children}</div>;\r\n};\r\n\r\nexport default Header;\r\n","import React, { SFC } from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nimport { getColor } from \"color-selector\";\r\n\r\ninterface Props {\r\n  color: string;\r\n  name?: string;\r\n  id?: string;\r\n}\r\n\r\nconst Color: SFC<Props> = ({ color, name, id }) => {\r\n  const onClick = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n    navigator.clipboard.writeText(e.currentTarget.innerText);\r\n  };\r\n\r\n  const CopyLayer = (\r\n    <HoverLayer>\r\n      <CopyButton onClick={onClick}>{color}</CopyButton>\r\n      <CopyButton onClick={onClick}>{name}</CopyButton>\r\n      <CopyButton onClick={onClick}>{id}</CopyButton>\r\n    </HoverLayer>\r\n  );\r\n\r\n  const ColorDiv = styled.div`\r\n    flex-grow: 1;\r\n    width: 100%;\r\n    background-color: ${color};\r\n    border: solid 1px ${getColor(\"color-selector-gray-4\")}\r\n    border-radius: 4px;\r\n\r\n    margin-bottom: 8px;\r\n  `;\r\n\r\n  return (\r\n    <ColorWrapper>\r\n      {CopyLayer}\r\n      <ColorDiv />\r\n      <TextDiv>\r\n        {name && <span>{name}</span>}\r\n        {id && <span>{id}</span>}\r\n        {color && <span>{color}</span>}\r\n      </TextDiv>\r\n    </ColorWrapper>\r\n  );\r\n};\r\n\r\nexport default Color;\r\n\r\nconst fadeIn = keyframes`\r\nfrom {\r\n  opacity:0\r\n}\r\nto {\r\n  opacity:1\r\n}\r\n`;\r\n\r\nconst textShadow = keyframes`\r\nfrom {\r\n  text-shadow: 0 0 0 black;\r\n}\r\nto {\r\n  text-shadow: 0 0 45px black;\r\n}\r\n`;\r\n\r\nconst TextDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-contents: center;\r\n\r\n  color:${getColor(\"color-selector-gray-7\")}\r\n\r\n  width: 100%;\r\n\r\n  text-transform: uppercase;\r\n\r\n  span:nth-child(1) {\r\n    font-weight: bold;\r\n  }\r\n  span:nth-child(2) {\r\n\r\n    font-weight: 300;\r\n  }\r\n  span:nth-child(3) {\r\n    font-weight: 400;\r\n  }\r\n`;\r\n\r\nconst HoverLayer = styled.div`\r\n  position: absolute;\r\n\r\n  top: 0;\r\n  left: 0;\r\n\r\n  display: none;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-contents: center;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  border-radius: 7px;\r\n\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n\r\n  animation: ${fadeIn} 0.8s ease-in-out forwards;\r\n`;\r\n\r\nconst CopyButton = styled.span`\r\n  flex-grow: 1;\r\n\r\n  display: flex;\r\n\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  width: 100%;\r\n\r\n  font-size: 1.2rem;\r\n\r\n  :hover {\r\n    font-weight: 500;\r\n    animation: ${textShadow} 1s ease-in-out forwards;\r\n\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst ColorWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-contents: center;\r\n\r\n  width: 250px;\r\n  height: 250px;\r\n\r\n  z-index: 3;\r\n\r\n  padding: 8px;\r\n\r\n  border: 1px solid ${getColor(\"color-selector-gray-4\")};\r\n  border-radius: 7px;\r\n\r\n  margin: 10px 10px auto;\r\n\r\n  opacity: 0;\r\n\r\n  animation: ${fadeIn} 0.8s ease-in-out forwards;\r\n\r\n  position: relative;\r\n\r\n  :hover {\r\n    ${HoverLayer} {\r\n      display: flex;\r\n    }\r\n  }\r\n\r\n  transition-duration: 0.4s;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 150px;\r\n    height: 150px;\r\n\r\n    font-size: 0.7rem;\r\n  }\r\n`;\r\n","import React, { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Color from \"../Color/Color\";\r\nimport { getColorName, getColor } from \"color-selector\";\r\n\r\ninterface Props {\r\n  colorIds: string[];\r\n  title?: string;\r\n}\r\n\r\nconst ColorList: FC<Props> = ({ colorIds, title = \"Color\" }) => {\r\n  return (\r\n    <Wrapper>\r\n      <Title>{title}</Title>\r\n      <ListDiv>\r\n        {colorIds.map(id => {\r\n          const color = getColor(id);\r\n          if (color)\r\n            return <Color color={color} name={getColorName(id)} id={id} />;\r\n          return <></>;\r\n        })}\r\n      </ListDiv>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default ColorList;\r\n\r\nconst Wrapper = styled.div`\r\n  width: auto;\r\n\r\n  margin: 15px 10px 15px 0;\r\n`;\r\n\r\nconst ListDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-contents: flex-start;\r\n  flex-direct: row;\r\n\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  font-size: 1.5rem;\r\n\r\n  text-transform: uppercase;\r\n`;\r\n","import React, { useState, ReactNode } from \"react\";\nimport Header from \"./components/Header/Header\";\nimport colorJson from \"color-selector/color-set.json\";\nimport ColorList from \"./components/ColorList/ColorList\";\nimport { getColorName, getColor } from \"color-selector\";\n\nconst App: React.FC = () => {\n  const colorSet = new Set<string>();\n  const colorKeys = Object.keys(colorJson);\n  colorKeys.forEach(color => {\n    colorSet.add(color.split(\"-\")[2]);\n  });\n\n  const [keyword, setKeyword] = useState<string>(\"\");\n\n  let lists: ReactNode[] = [];\n  colorSet.forEach(category => {\n    const list = colorKeys.filter(key => {\n      const name = getColorName(key) || \"\";\n      const color = getColor(key) || \"\";\n      return (\n        key.includes(category) &&\n        (key.toLowerCase().includes(keyword.toLowerCase()) ||\n          name.toLowerCase().includes(keyword.toLowerCase()) ||\n          color.toLowerCase().includes(keyword.toLowerCase()))\n      );\n    });\n\n    if (list.length > 0)\n      lists = lists.concat(<ColorList colorIds={list} title={category} />);\n  });\n\n  const onChange = ({\n    target: { value }\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setKeyword(value);\n  };\n\n  return (\n    <>\n      <Header>\n        <span>{\"Color Selector\"}</span>\n        <input type={\"text\"} onChange={onChange} />\n      </Header>\n      <div className={\"contents\"}>{lists}</div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}